{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Alfredo\\\\Desktop\\\\front-end utils\\\\progetti\\\\SiciliaNaturalmenteApp\\\\screens\\\\BillingDetailsScreen.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\nimport { useNavigation } from '@react-navigation/core';\nimport { images } from \"../data/dummy-data\";\nimport { Header } from 'react-native-elements';\nimport axios from \"../axios\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nvar BillingDetailsScreen = function BillingDetailsScreen() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      address = _useState2[0],\n      setAddress = _useState2[1];\n\n  var navigation = useNavigation();\n  useEffect(function () {\n    navigation.addListener('beforeRemove', function (e) {\n      e.preventDefault();\n      Alert.alert('Dati necessari', 'perfavore inserisci indirizzo di spedizione simile all esempio fornito');\n    });\n  }, [navigation]);\n\n  var handleSubmit = function handleSubmit() {\n    var token, config, data;\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            token = AsyncStorage.getItem('token');\n            config = {\n              headers: {\n                Authorization: 'Bearer ' + token\n              }\n            };\n            data = axios.post('/address', {\n              indirizzo: address\n            }, config);\n            navigation.navigate('AccountHome');\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(SafeAreaView, {\n    behavior: Platform.OS === 'ios' ? 'padding' : 'height',\n    onPress: function onPress() {\n      Keyboard.dismiss();\n    },\n    style: {\n      flex: 1\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, React.createElement(Header, {\n    backgroundImage: images.otherImages.royaltyBackground,\n    backgroundImageStyle: {\n      borderRadius: 30\n    },\n    statusBarProps: {\n      barStyle: 'light-content'\n    },\n    leftContainerStyle: {\n      marginLeft: 10\n    },\n    backgroundColor: \"#F6F7FA\",\n    containerStyle: {\n      height: 150\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: {\n      padding: 15,\n      flex: 1\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.heading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, \" Indirizzo di spedizione \"), React.createElement(Text, {\n    style: styles.text,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, \"inserisci il tuo indirizzo per intero, se \\xE8 possibile con il civico\"), !address ? React.createElement(Text, {\n    style: styles.text,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, \"Esempio: Via Cagliari, 11, Catania, CT, Italia\") : React.createElement(Text, {\n    style: styles.text,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, \"E' simile all'esempio mostrato? Potrai comunque cambiarlo per confermare l'indirizzo di spedizione\"), React.createElement(GooglePlacesAutocomplete, {\n    placeholder: \"Search\",\n    minLength: 2,\n    autoFocus: false,\n    returnKeyType: 'search',\n    listViewDisplayed: \"auto\",\n    fetchDetails: true,\n    renderDescription: function renderDescription(row) {\n      return row.description;\n    },\n    onPress: function onPress(data) {\n      var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      setAddress(data.terms);\n    },\n    query: {\n      key: 'AIzaSyDCetXIWkMO_4b_NH-s_lzepRCym53wp1Q',\n      language: 'it',\n      types: 'address'\n    },\n    styles: {\n      description: {\n        fontWeight: 'bold'\n      },\n      predefinedPlacesDescription: {\n        color: '#1faadb'\n      }\n    },\n    nearbyPlacesAPI: \"GooglePlacesSearch\",\n    GooglePlacesDetailsQuery: {\n      fields: 'formatted_address'\n    },\n    filterReverseGeocodingByTypes: ['locality', 'administrative_area_level_3'],\n    debounce: 200,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }), React.createElement(Button, {\n    title: \"conferma\",\n    disabled: !address,\n    onPress: function onPress() {\n      return handleSubmit();\n    },\n    color: \"#094067\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  })), React.createElement(StatusBar, {\n    style: \"light\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  heading: {\n    fontFamily: 'Inter_600SemiBold',\n    fontSize: 30,\n    color: '#094067',\n    marginBottom: 20,\n    marginTop: 20\n  },\n  text: {\n    fontFamily: 'Inter_600SemiBold',\n    fontSize: 15,\n    color: '#094067',\n    marginBottom: 20,\n    marginLeft: 8,\n    marginTop: 10\n  }\n});\nexport default BillingDetailsScreen;","map":{"version":3,"sources":["C:/Users/Alfredo/Desktop/front-end utils/progetti/SiciliaNaturalmenteApp/screens/BillingDetailsScreen.js"],"names":["React","useState","useEffect","GooglePlacesAutocomplete","useNavigation","images","Header","axios","AsyncStorage","BillingDetailsScreen","address","setAddress","navigation","addListener","e","preventDefault","Alert","alert","handleSubmit","token","getItem","config","headers","Authorization","data","post","indirizzo","navigate","Platform","OS","Keyboard","dismiss","flex","otherImages","royaltyBackground","borderRadius","barStyle","marginLeft","height","padding","styles","heading","text","row","description","details","terms","key","language","types","fontWeight","predefinedPlacesDescription","color","fields","StyleSheet","create","fontFamily","fontSize","marginBottom","marginTop"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport {\r\n  Text,\r\n  Platform,\r\n  Keyboard,\r\n  SafeAreaView,\r\n  StyleSheet,\r\n  Alert,\r\n  Button,\r\n  StatusBar,\r\n  View,\r\n} from 'react-native'\r\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete'\r\nimport { useNavigation } from '@react-navigation/core'\r\nimport { images } from '../data/dummy-data'\r\nimport { Header } from 'react-native-elements'\r\nimport axios from '../axios'\r\nimport AsyncStorage from '@react-native-async-storage/async-storage'\r\n\r\nconst BillingDetailsScreen = () => {\r\n  const [address, setAddress] = useState()\r\n  const navigation = useNavigation()\r\n\r\n  //prevent the user to left the screen until he insert all the data\r\n  useEffect(() => {\r\n    navigation.addListener('beforeRemove', (e) => {\r\n      e.preventDefault()\r\n      Alert.alert(\r\n        'Dati necessari',\r\n        'perfavore inserisci indirizzo di spedizione simile all esempio fornito',\r\n      )\r\n    })\r\n  }, [navigation])\r\n\r\n  const handleSubmit = async () => {\r\n    const token = AsyncStorage.getItem('token')\r\n\r\n    let config = {\r\n      headers: {\r\n        Authorization: 'Bearer ' + token,\r\n      },\r\n    }\r\n\r\n    const data = axios.post(\r\n      '/address',\r\n      {\r\n        indirizzo: address,\r\n      },\r\n      config,\r\n    )\r\n\r\n    navigation.navigate('AccountHome')\r\n  }\r\n\r\n  return (\r\n    <SafeAreaView\r\n      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\r\n      onPress={() => {\r\n        Keyboard.dismiss()\r\n      }}\r\n      style={{ flex: 1 }}\r\n    >\r\n      <Header\r\n        backgroundImage={images.otherImages.royaltyBackground}\r\n        backgroundImageStyle={{ borderRadius: 30 }}\r\n        statusBarProps={{ barStyle: 'light-content' }}\r\n        leftContainerStyle={{\r\n          marginLeft: 10,\r\n        }}\r\n        backgroundColor=\"#F6F7FA\"\r\n        containerStyle={{\r\n          height: 150,\r\n        }}\r\n      />\r\n      <View style={{ padding: 15, flex: 1 }}>\r\n        <Text style={styles.heading}> Indirizzo di spedizione </Text>\r\n        <Text style={styles.text}>\r\n          inserisci il tuo indirizzo per intero, se è possibile con il civico\r\n        </Text>\r\n        {!address ? (\r\n          <Text style={styles.text}>\r\n            Esempio: Via Cagliari, 11, Catania, CT, Italia\r\n          </Text>\r\n        ) : (\r\n          <Text style={styles.text}>\r\n            E' simile all'esempio mostrato? Potrai comunque cambiarlo per\r\n            confermare l'indirizzo di spedizione\r\n          </Text>\r\n        )}\r\n\r\n        <GooglePlacesAutocomplete\r\n          placeholder=\"Search\"\r\n          minLength={2} // minimum length of text to search\r\n          autoFocus={false}\r\n          returnKeyType={'search'} // Can be left out for default return key https://facebook.github.io/react-native/docs/textinput.html#returnkeytype\r\n          listViewDisplayed=\"auto\" // true/false/undefined\r\n          fetchDetails={true}\r\n          renderDescription={(row) => row.description} // custom description render\r\n          onPress={(data, details = null) => {\r\n            setAddress(data.terms)\r\n          }}\r\n          query={{\r\n            // available options: https://developers.google.com/places/web-service/autocomplete\r\n            key: 'AIzaSyDCetXIWkMO_4b_NH-s_lzepRCym53wp1Q',\r\n            language: 'it', // language of the results\r\n            types: 'address', // default: 'geocode'\r\n          }}\r\n          styles={{\r\n            description: {\r\n              fontWeight: 'bold',\r\n            },\r\n            predefinedPlacesDescription: {\r\n              color: '#1faadb',\r\n            },\r\n          }}\r\n          nearbyPlacesAPI=\"GooglePlacesSearch\" // Which API to use: GoogleReverseGeocoding or GooglePlacesSearch\r\n          GooglePlacesDetailsQuery={{\r\n            fields: 'formatted_address',\r\n          }}\r\n          filterReverseGeocodingByTypes={[\r\n            'locality',\r\n            'administrative_area_level_3',\r\n          ]} // filter the reverse geocoding results by types - ['locality', 'administrative_area_level_3'] if you want to display only cities\r\n          debounce={200}\r\n        />\r\n\r\n        <Button\r\n          title=\"conferma\"\r\n          disabled={!address}\r\n          onPress={() => handleSubmit()}\r\n          color=\"#094067\"\r\n        />\r\n      </View>\r\n      <StatusBar style=\"light\" />\r\n    </SafeAreaView>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  heading: {\r\n    fontFamily: 'Inter_600SemiBold',\r\n    fontSize: 30,\r\n    color: '#094067',\r\n    marginBottom: 20,\r\n\r\n    marginTop: 20,\r\n  },\r\n  text: {\r\n    fontFamily: 'Inter_600SemiBold',\r\n    fontSize: 15,\r\n    color: '#094067',\r\n    marginBottom: 20,\r\n    marginLeft: 8,\r\n    marginTop: 10,\r\n  },\r\n})\r\n\r\nexport default BillingDetailsScreen\r\n"]},"metadata":{},"sourceType":"module"}