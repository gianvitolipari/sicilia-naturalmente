{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Alfredo\\\\Desktop\\\\front-end utils\\\\progetti\\\\SiciliaNaturalmenteApp\\\\screens\\\\ChatScreen.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useCallback, useEffect, useLayoutEffect, useRef } from 'react';\nimport { GiftedChat } from 'react-native-gifted-chat';\nimport { db } from \"../firebase\";\nimport Constants from 'expo-constants';\nimport * as Notifications from 'expo-notifications';\nimport { Header } from 'react-native-elements';\nimport { images } from \"../data/dummy-data\";\nimport { StatusBar } from 'expo-status-bar';\nNotifications.setNotificationHandler({\n  handleNotification: function handleNotification() {\n    return _regeneratorRuntime.async(function handleNotification$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", {\n              shouldShowAlert: true,\n              shouldPlaySound: false,\n              shouldSetBadge: false\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});\n\nvar ChatScreen = function ChatScreen() {\n  var sendPushNotification = function sendPushNotification(expoPushToken) {\n    var token, message;\n    return _regeneratorRuntime.async(function sendPushNotification$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(registerForPushNotificationsAsync());\n\n          case 2:\n            token = _context2.sent;\n            message = {\n              to: token,\n              sound: 'default',\n              title: 'Original Title',\n              body: 'And here is the body!',\n              data: {\n                someData: 'goes here'\n              }\n            };\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(fetch('https://exp.host/--/api/v2/push/send', {\n              method: 'POST',\n              headers: {\n                Accept: 'application/json',\n                'Accept-encoding': 'gzip, deflate',\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(message)\n            }));\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      expoPushToken = _useState2[0],\n      setExpoPushToken = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      notification = _useState4[0],\n      setNotification = _useState4[1];\n\n  var notificationListener = useRef();\n  var responseListener = useRef();\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      messages = _useState6[0],\n      setMessages = _useState6[1];\n\n  var textRef = useRef(true);\n  useEffect(function () {\n    notificationListener.current = Notifications.addNotificationReceivedListener(function (notification) {\n      console.log(notification, ' here');\n      sendPushNotification();\n    });\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(function (response) {\n      console.log(response, ' swag');\n    });\n    var subscribe = db.collection('chats').onSnapshot(function _callee(snapshot) {\n      return _regeneratorRuntime.async(function _callee$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              snapshot.docChanges().forEach(function (change) {\n                console.log(change.type);\n\n                if (change.type == 'added') {\n                  var data = change.doc.data();\n                  data.createdAt = data.createdAt;\n                  setMessages(function (prevMessages) {\n                    return GiftedChat.append(prevMessages, data);\n                  });\n                }\n              });\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n    textRef.current && setMessages(function (previousMessages) {\n      return GiftedChat.append(previousMessages, {\n        _id: 1,\n        text: 'Puoi chiedermi di tutti gli stati degli ordini, delle novitÃ  e informazioni!',\n        createdAt: new Date(),\n        user: {\n          _id: 2,\n          name: 'SiciliaNaturalmente',\n          avatar: 'https://www.accademiasicilianadellapasta.it/wp-content/uploads/2020/06/Logo-Sicilia.jpg'\n        }\n      });\n    });\n    return function () {\n      subscribe();\n      Notifications.removeNotificationSubscription(notificationListener.current);\n      Notifications.removeNotificationSubscription(responseListener.current);\n      textRef.current = 'false';\n    };\n  }, []);\n  useLayoutEffect(function () {\n    setTimeout(function () {\n      fetchMessage();\n    }, 3000);\n    return;\n  }, []);\n\n  var fetchMessage = function fetchMessage() {\n    var coll;\n    return _regeneratorRuntime.async(function fetchMessage$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            coll = db.collection('chats');\n            coll.where('user._id', 'in', ['alfri.lipari@gmail.com', 1]).orderBy('createdAt', 'desc').get().then(function (query) {\n              return setMessages(query.docs.map(function (doc) {\n                return {\n                  _id: doc.data()._id,\n                  createdAt: doc.data().createdAt,\n                  text: doc.data().text,\n                  user: doc.data().user\n                };\n              }));\n            });\n\n          case 2:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var _onSend = useCallback(function _callee2() {\n    var messages,\n        _messages$,\n        _id,\n        text,\n        user,\n        createdAt,\n        _args5 = arguments;\n\n    return _regeneratorRuntime.async(function _callee2$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            messages = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : [];\n            console.log(messages[0], 'ssh');\n            _messages$ = messages[0], _id = _messages$._id, text = _messages$.text, user = _messages$.user;\n            createdAt = Math.round(new Date().getTime() / 1000);\n            db.collection('chats').add({\n              _id: _id,\n              createdAt: createdAt,\n              text: text,\n              user: user\n            });\n\n          case 5:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, []);\n\n  function registerForPushNotificationsAsync() {\n    var token, _await$Notifications$, existingStatus, finalStatus, _await$Notifications$2, status;\n\n    return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            if (!Constants.isDevice) {\n              _context6.next = 21;\n              break;\n            }\n\n            _context6.next = 3;\n            return _regeneratorRuntime.awrap(Notifications.getPermissionsAsync());\n\n          case 3:\n            _await$Notifications$ = _context6.sent;\n            existingStatus = _await$Notifications$.status;\n            finalStatus = existingStatus;\n\n            if (!(existingStatus !== 'granted')) {\n              _context6.next = 12;\n              break;\n            }\n\n            _context6.next = 9;\n            return _regeneratorRuntime.awrap(Notifications.requestPermissionsAsync());\n\n          case 9:\n            _await$Notifications$2 = _context6.sent;\n            status = _await$Notifications$2.status;\n            finalStatus = status;\n\n          case 12:\n            if (!(finalStatus !== 'granted')) {\n              _context6.next = 15;\n              break;\n            }\n\n            alert('Failed to get push token for push notification!');\n            return _context6.abrupt(\"return\");\n\n          case 15:\n            _context6.next = 17;\n            return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n          case 17:\n            token = _context6.sent.data;\n            console.log(token);\n            _context6.next = 22;\n            break;\n\n          case 21:\n            alert('Must use physical device for Push Notifications');\n\n          case 22:\n            if (Platform.OS === 'android') {\n              Notifications.setNotificationChannelAsync('default', {\n                name: 'default',\n                importance: Notifications.AndroidImportance.MAX,\n                vibrationPattern: [0, 250, 250, 250],\n                lightColor: '#FF231F7C'\n              });\n            }\n\n            return _context6.abrupt(\"return\", token);\n\n          case 24:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(Header, {\n    backgroundImage: images.otherImages.royaltyBackground,\n    backgroundImageStyle: {\n      borderRadius: 30\n    },\n    statusBarProps: {\n      barStyle: 'light-content'\n    },\n    leftContainerStyle: {\n      marginLeft: 10\n    },\n    backgroundColor: \"#F6F7FA\",\n    containerStyle: {\n      height: 150\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }\n  }), React.createElement(GiftedChat, {\n    messages: messages,\n    onSend: function onSend(messages) {\n      return _onSend(messages);\n    },\n    user: {\n      _id: 'alfri.lipari@gmail.com'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }\n  }), React.createElement(StatusBar, {\n    style: \"light\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default ChatScreen;","map":{"version":3,"sources":["C:/Users/Alfredo/Desktop/front-end utils/progetti/SiciliaNaturalmenteApp/screens/ChatScreen.js"],"names":["React","useState","useCallback","useEffect","useLayoutEffect","useRef","GiftedChat","db","Constants","Notifications","Header","images","StatusBar","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","ChatScreen","sendPushNotification","expoPushToken","registerForPushNotificationsAsync","token","message","to","sound","title","body","data","someData","fetch","method","headers","Accept","JSON","stringify","setExpoPushToken","notification","setNotification","notificationListener","responseListener","messages","setMessages","textRef","current","addNotificationReceivedListener","console","log","addNotificationResponseReceivedListener","response","subscribe","collection","onSnapshot","snapshot","docChanges","forEach","change","type","doc","createdAt","prevMessages","append","previousMessages","_id","text","Date","user","name","avatar","removeNotificationSubscription","setTimeout","fetchMessage","coll","where","orderBy","get","then","query","docs","map","onSend","Math","round","getTime","add","isDevice","getPermissionsAsync","existingStatus","status","finalStatus","requestPermissionsAsync","alert","getExpoPushTokenAsync","Platform","OS","setNotificationChannelAsync","importance","AndroidImportance","MAX","vibrationPattern","lightColor","otherImages","royaltyBackground","borderRadius","barStyle","marginLeft","height"],"mappings":"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","sourcesContent":["import React, {\r\n  useState,\r\n  useCallback,\r\n  useEffect,\r\n  useLayoutEffect,\r\n  useRef,\r\n} from 'react'\r\nimport { GiftedChat } from 'react-native-gifted-chat'\r\nimport { db } from '../firebase'\r\n\r\nimport Constants from 'expo-constants'\r\nimport * as Notifications from 'expo-notifications'\r\nimport { Header } from 'react-native-elements'\r\nimport { images } from '../data/dummy-data'\r\nimport { StatusBar } from 'expo-status-bar'\r\n\r\nNotifications.setNotificationHandler({\r\n  handleNotification: async () => ({\r\n    shouldShowAlert: true,\r\n    shouldPlaySound: false,\r\n    shouldSetBadge: false,\r\n  }),\r\n})\r\n\r\nconst ChatScreen = () => {\r\n  // Can use this function below, OR use Expo's Push Notification Tool-> https://expo.dev/notifications\r\n  const sendPushNotification = async (expoPushToken) => {\r\n    const token = await registerForPushNotificationsAsync()\r\n\r\n    const message = {\r\n      to: token,\r\n      sound: 'default',\r\n      title: 'Original Title',\r\n      body: 'And here is the body!',\r\n      data: { someData: 'goes here' },\r\n    }\r\n\r\n    await fetch('https://exp.host/--/api/v2/push/send', {\r\n      method: 'POST',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Accept-encoding': 'gzip, deflate',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(message),\r\n    })\r\n  }\r\n\r\n  // notification setup\r\n  const [expoPushToken, setExpoPushToken] = useState('')\r\n  const [notification, setNotification] = useState(false)\r\n  const notificationListener = useRef()\r\n  const responseListener = useRef()\r\n\r\n  const [messages, setMessages] = useState([])\r\n\r\n  const textRef = useRef(true)\r\n\r\n  useEffect(() => {\r\n    // This listener is fired whenever a notification is received while the app is foregrounded\r\n    notificationListener.current = Notifications.addNotificationReceivedListener(\r\n      (notification) => {\r\n        console.log(notification, ' here')\r\n        sendPushNotification()\r\n      },\r\n    )\r\n\r\n    // This listener is fired whenever a user taps on or interacts with a notification (works when app is foregrounded, backgrounded, or killed)\r\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(\r\n      (response) => {\r\n        console.log(response, ' swag')\r\n      },\r\n    )\r\n\r\n    // for real update\r\n    const subscribe = db.collection('chats').onSnapshot(async (snapshot) => {\r\n      snapshot.docChanges().forEach((change) => {\r\n        console.log(change.type)\r\n        if (change.type == 'added') {\r\n          let data = change.doc.data()\r\n          data.createdAt = data.createdAt\r\n\r\n          setMessages((prevMessages) => GiftedChat.append(prevMessages, data))\r\n        }\r\n      })\r\n      // send the notification to the user\r\n    })\r\n\r\n    // set the welcome message\r\n    textRef.current &&\r\n      setMessages((previousMessages) =>\r\n        GiftedChat.append(previousMessages, {\r\n          _id: 1,\r\n\r\n          text:\r\n            'Puoi chiedermi di tutti gli stati degli ordini, delle novitÃ  e informazioni!',\r\n          createdAt: new Date(),\r\n          user: {\r\n            _id: 2,\r\n            name: 'SiciliaNaturalmente',\r\n            avatar:\r\n              'https://www.accademiasicilianadellapasta.it/wp-content/uploads/2020/06/Logo-Sicilia.jpg',\r\n          },\r\n        }),\r\n      )\r\n\r\n    return () => {\r\n      subscribe()\r\n      Notifications.removeNotificationSubscription(notificationListener.current)\r\n      Notifications.removeNotificationSubscription(responseListener.current)\r\n      textRef.current = 'false'\r\n    }\r\n  }, [])\r\n\r\n  useLayoutEffect(() => {\r\n    // query the message\r\n\r\n    setTimeout(() => {\r\n      fetchMessage()\r\n    }, 3000)\r\n\r\n    return\r\n  }, [])\r\n\r\n  const fetchMessage = async () => {\r\n    const coll = db.collection('chats')\r\n\r\n    coll\r\n      .where('user._id', 'in', ['alfri.lipari@gmail.com', 1]) // here put the email of the user\r\n      .orderBy('createdAt', 'desc')\r\n      .get()\r\n      .then((query) =>\r\n        setMessages(\r\n          query.docs.map((doc) => ({\r\n            _id: doc.data()._id,\r\n            createdAt: doc.data().createdAt,\r\n            text: doc.data().text,\r\n            user: doc.data().user,\r\n          })),\r\n        ),\r\n      )\r\n  }\r\n\r\n  const onSend = useCallback(async (messages = []) => {\r\n    console.log(messages[0], 'ssh')\r\n    const { _id, text, user } = messages[0]\r\n    const createdAt = Math.round(new Date().getTime() / 1000)\r\n    db.collection('chats').add({\r\n      _id,\r\n      createdAt,\r\n      text,\r\n      user,\r\n    })\r\n  }, [])\r\n\r\n  async function registerForPushNotificationsAsync() {\r\n    let token\r\n    if (Constants.isDevice) {\r\n      const {\r\n        status: existingStatus,\r\n      } = await Notifications.getPermissionsAsync()\r\n      let finalStatus = existingStatus\r\n      if (existingStatus !== 'granted') {\r\n        const { status } = await Notifications.requestPermissionsAsync()\r\n        finalStatus = status\r\n      }\r\n      if (finalStatus !== 'granted') {\r\n        alert('Failed to get push token for push notification!')\r\n        return\r\n      }\r\n      token = (await Notifications.getExpoPushTokenAsync()).data\r\n      console.log(token)\r\n    } else {\r\n      alert('Must use physical device for Push Notifications')\r\n    }\r\n\r\n    if (Platform.OS === 'android') {\r\n      Notifications.setNotificationChannelAsync('default', {\r\n        name: 'default',\r\n        importance: Notifications.AndroidImportance.MAX,\r\n        vibrationPattern: [0, 250, 250, 250],\r\n        lightColor: '#FF231F7C',\r\n      })\r\n    }\r\n\r\n    return token\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header\r\n        backgroundImage={images.otherImages.royaltyBackground}\r\n        backgroundImageStyle={{ borderRadius: 30 }}\r\n        statusBarProps={{ barStyle: 'light-content' }}\r\n        leftContainerStyle={{\r\n          marginLeft: 10,\r\n        }}\r\n        backgroundColor=\"#F6F7FA\"\r\n        containerStyle={{\r\n          height: 150,\r\n        }}\r\n      />\r\n      <GiftedChat\r\n        messages={messages}\r\n        onSend={(messages) => onSend(messages)}\r\n        user={{\r\n          _id: 'alfri.lipari@gmail.com', //put the email of the user maybe\r\n        }}\r\n      />\r\n      <StatusBar style=\"light\" />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ChatScreen\r\n"]},"metadata":{},"sourceType":"module"}