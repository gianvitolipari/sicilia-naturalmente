{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Alfredo\\\\Desktop\\\\front-end utils\\\\progetti\\\\SiciliaNaturalmenteApp\\\\screens\\\\CreditInformationScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport { Input } from 'react-native-elements';\nimport { useStripe, CardForm, CardField, useConfirmPayment } from '@stripe/stripe-react-native';\nimport { Formik } from 'formik';\nimport axios from 'axios';\nimport * as userActions from \"../store/actions/user\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AntDesign } from '@expo/vector-icons';\nimport { Header, Text, Button } from 'react-native-elements';\nimport globalStyle, { colors } from \"../Style\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nexport default function PaymentsUICompleteScreen(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n  var email = route.params.email.email;\n\n  var _useStripe = useStripe(),\n      createPaymentMethod = _useStripe.createPaymentMethod,\n      handleCardAction = _useStripe.handleCardAction;\n\n  var _useConfirmPayment = useConfirmPayment(),\n      confirmPayment = _useConfirmPayment.confirmPayment,\n      loading = _useConfirmPayment.loading;\n\n  var customer = useSelector(function (state) {\n    return state.user.user;\n  });\n  console.log(customer, ' ecooooo');\n  useEffect(function () {\n    customer && retrievePaymentInfo();\n    return function () {\n      console.log('cleanup');\n    };\n  }, []);\n\n  var retrievePaymentInfo = function retrievePaymentInfo() {\n    var token, config, customer_id, response, data;\n    return _regeneratorRuntime.async(function retrievePaymentInfo$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('token'));\n\n          case 3:\n            token = _context.sent;\n            config = {\n              headers: {\n                Authorization: 'Bearer ' + token\n              }\n            };\n            customer_id = {\n              customer: customer.customer_id,\n              type: 'card'\n            };\n            console.log('Mh');\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(axios.get('/payment/customer_payment_methods', customer_id, config));\n\n          case 9:\n            response = _context.sent;\n            console.log('Mh');\n            _context.next = 13;\n            return _regeneratorRuntime.awrap(response.data);\n\n          case 13:\n            data = _context.sent;\n            console.log(data, ' tipo ok');\n            _context.next = 20;\n            break;\n\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0.response.data);\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 17]], Promise);\n  };\n\n  var dispatch = useDispatch();\n\n  var _useState = useState({\n    complete: false\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      card = _useState2[0],\n      setCard = _useState2[1];\n\n  var _useState3 = useState({\n    completed: false\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      cardInformation = _useState4[0],\n      setCardInformation = _useState4[1];\n\n  var createPaymentMeth = function createPaymentMeth() {\n    var _await$createPaymentM, paymentMethod, error, token, config, response;\n\n    return _regeneratorRuntime.async(function createPaymentMeth$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(createPaymentMethod({\n              type: 'Card',\n              billingDetails: {\n                email: customer.email\n              }\n            }));\n\n          case 3:\n            _await$createPaymentM = _context2.sent;\n            paymentMethod = _await$createPaymentM.paymentMethod;\n            error = _await$createPaymentM.error;\n\n            if (error) {\n              console.log('Payment Method error', error);\n            }\n\n            console.log(paymentMethod, 'yep');\n            _context2.next = 10;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('token'));\n\n          case 10:\n            token = _context2.sent;\n            config = {\n              headers: {\n                Authorization: 'Bearer ' + token\n              }\n            };\n            _context2.next = 14;\n            return _regeneratorRuntime.awrap(axios.put('/payment/customer', paymentMethod.id, config));\n\n          case 14:\n            response = _context2.sent;\n            console.log(response.data, 'herere');\n            _context2.next = 21;\n            break;\n\n          case 18:\n            _context2.prev = 18;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0, 'In credit');\n\n          case 21:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 18]], Promise);\n  };\n\n  var placeholder = {\n    label: 'Select a color...',\n    value: null\n  };\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: globalStyle.boldSubText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, \"INFORMAZIONI SU PAGAMENTO\"), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, React.createElement(CardField, {\n    postalCodeEnabled: false,\n    placeholder: {\n      number: '4242 4242 4242 4242'\n    },\n    cardStyle: {\n      backgroundColor: '#FFFFFF',\n      textColor: '#000000'\n    },\n    style: {\n      width: '100%',\n      height: 50,\n      marginVertical: 30\n    },\n    onCardChange: function onCardChange(cardDetails) {\n      console.log('cardDetails', cardDetails);\n    },\n    onFocus: function onFocus(focusedField) {\n      console.log('focusField', focusedField);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  })), React.createElement(Button, {\n    title: \"qui\",\n    onPress: createPaymentMeth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1\n  },\n  container: {\n    alignSelf: 'center',\n    width: '90%',\n    marginTop: 20\n  },\n  formContainer: {\n    marginTop: 10\n  }\n});","map":{"version":3,"sources":["C:/Users/Alfredo/Desktop/front-end utils/progetti/SiciliaNaturalmenteApp/screens/CreditInformationScreen.js"],"names":["React","useEffect","useState","Input","useStripe","CardForm","CardField","useConfirmPayment","Formik","axios","userActions","useDispatch","useSelector","AntDesign","Header","Text","Button","globalStyle","colors","AsyncStorage","PaymentsUICompleteScreen","navigation","route","email","params","createPaymentMethod","handleCardAction","confirmPayment","loading","customer","state","user","console","log","retrievePaymentInfo","getItem","token","config","headers","Authorization","customer_id","type","get","response","data","dispatch","complete","card","setCard","completed","cardInformation","setCardInformation","createPaymentMeth","billingDetails","paymentMethod","error","put","id","placeholder","label","value","styles","container","boldSubText","number","backgroundColor","textColor","width","height","marginVertical","cardDetails","focusedField","StyleSheet","create","screen","flex","alignSelf","marginTop","formContainer"],"mappings":"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","sourcesContent":["// * CREDIT INFORMATION SCREEN\r\n// ? what should it do\r\n// * save billing and spedition information\r\n\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Alert, StyleSheet, View, Keyboard } from 'react-native'\r\nimport { Input } from 'react-native-elements'\r\nimport {\r\n  useStripe,\r\n  CardForm,\r\n  CardField,\r\n  useConfirmPayment,\r\n} from '@stripe/stripe-react-native'\r\nimport { Formik } from 'formik'\r\nimport axios from 'axios'\r\n\r\nimport * as userActions from '../store/actions/user'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AntDesign } from '@expo/vector-icons'\r\nimport { Header, Text, Button } from 'react-native-elements'\r\nimport globalStyle, { colors } from '../Style'\r\nimport AsyncStorage from '@react-native-async-storage/async-storage'\r\n\r\nexport default function PaymentsUICompleteScreen({ navigation, route }) {\r\n  const email = route.params.email.email\r\n\r\n  //retrieve address information\r\n\r\n  const { createPaymentMethod, handleCardAction } = useStripe()\r\n  const { confirmPayment, loading } = useConfirmPayment()\r\n\r\n  const customer = useSelector((state) => state.user.user)\r\n  console.log(customer, ' ecooooo')\r\n\r\n  useEffect(() => {\r\n    customer && retrievePaymentInfo()\r\n    return () => {\r\n      console.log('cleanup')\r\n    }\r\n  }, [])\r\n\r\n  // retrieve all the payment method of the customer\r\n  const retrievePaymentInfo = async () => {\r\n    try {\r\n      const token = await AsyncStorage.getItem('token')\r\n      let config = {\r\n        headers: {\r\n          Authorization: 'Bearer ' + token,\r\n        },\r\n      }\r\n\r\n      const customer_id = {\r\n        customer: customer.customer_id,\r\n        type: 'card',\r\n      }\r\n      console.log('Mh')\r\n      const response = await axios.get(\r\n        '/payment/customer_payment_methods',\r\n        customer_id,\r\n        config,\r\n      )\r\n      console.log('Mh')\r\n      const data = await response.data\r\n      console.log(data, ' tipo ok')\r\n    } catch (e) {\r\n      console.log(e.response.data)\r\n    }\r\n  }\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const [card, setCard] = useState({\r\n    complete: false,\r\n  })\r\n\r\n  const [cardInformation, setCardInformation] = useState({\r\n    completed: false,\r\n  })\r\n\r\n  //here I will take all customer's utilities\r\n\r\n  const createPaymentMeth = async () => {\r\n    //first create payment-method attach this to a customer\r\n    try {\r\n      // Create payment method\r\n      const { paymentMethod, error } = await createPaymentMethod({\r\n        type: 'Card',\r\n\r\n        billingDetails: {\r\n          email: customer.email,\r\n        },\r\n      })\r\n\r\n      if (error) {\r\n        console.log('Payment Method error', error)\r\n      }\r\n\r\n      console.log(paymentMethod, 'yep')\r\n\r\n      const token = await AsyncStorage.getItem('token')\r\n      let config = {\r\n        headers: {\r\n          Authorization: 'Bearer ' + token,\r\n        },\r\n      }\r\n\r\n      //attach the paymentMethod to the customer\r\n      const response = await axios.put(\r\n        '/payment/customer',\r\n        paymentMethod.id,\r\n        config,\r\n      )\r\n\r\n      console.log(response.data, 'herere')\r\n    } catch (e) {\r\n      console.log(e, 'In credit')\r\n    }\r\n  }\r\n\r\n  const placeholder = {\r\n    label: 'Select a color...',\r\n    value: null,\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      {/* if shipping & billing properties exist show the form  */}\r\n      <Text style={globalStyle.boldSubText}>INFORMAZIONI SU PAGAMENTO</Text>\r\n\r\n      <View>\r\n        <CardField\r\n          postalCodeEnabled={false}\r\n          placeholder={{\r\n            number: '4242 4242 4242 4242',\r\n          }}\r\n          cardStyle={{\r\n            backgroundColor: '#FFFFFF',\r\n            textColor: '#000000',\r\n          }}\r\n          style={{\r\n            width: '100%',\r\n            height: 50,\r\n            marginVertical: 30,\r\n          }}\r\n          onCardChange={(cardDetails) => {\r\n            console.log('cardDetails', cardDetails)\r\n          }}\r\n          onFocus={(focusedField) => {\r\n            console.log('focusField', focusedField)\r\n          }}\r\n        />\r\n      </View>\r\n      <Button title=\"qui\" onPress={createPaymentMeth} />\r\n    </View>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  screen: {\r\n    flex: 1,\r\n  },\r\n  container: {\r\n    alignSelf: 'center',\r\n    width: '90%',\r\n    marginTop: 20,\r\n  },\r\n  formContainer: {\r\n    marginTop: 10,\r\n  },\r\n})\r\n"]},"metadata":{},"sourceType":"module"}